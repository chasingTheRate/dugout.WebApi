// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dugout.WebApi.Models;

namespace dugout.WebApi.Migrations
{
    [DbContext(typeof(MlbContext))]
    [Migration("20190417035440_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("dugout.WebApi.Models.Division", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("link");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("dugout.WebApi.Models.League", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("link");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("League");
                });

            modelBuilder.Entity("dugout.WebApi.Models.MlbRosters", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("copyright");

                    b.Property<string>("link");

                    b.Property<string>("rosterType");

                    b.Property<int>("teamId");

                    b.HasKey("id");

                    b.ToTable("MlbRosters");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Person", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("fullName");

                    b.Property<string>("link");

                    b.HasKey("id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Position", b =>
                {
                    b.Property<string>("code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("abbreviation");

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("code");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Roster", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MlbRostersid");

                    b.Property<string>("jerseyNumber");

                    b.Property<int>("parentTeamId");

                    b.Property<int?>("personid");

                    b.Property<string>("positioncode");

                    b.Property<string>("statuscode");

                    b.HasKey("id");

                    b.HasIndex("MlbRostersid");

                    b.HasIndex("personid");

                    b.HasIndex("positioncode");

                    b.HasIndex("statuscode");

                    b.ToTable("Roster");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Sport", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("link");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("dugout.WebApi.Models.SpringLeague", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("abbreviation");

                    b.Property<string>("link");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("SpringLeague");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Status", b =>
                {
                    b.Property<string>("code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description");

                    b.HasKey("code");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Team", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("abbreviation");

                    b.Property<bool>("active");

                    b.Property<string>("allStarStatus");

                    b.Property<int?>("divisionid");

                    b.Property<string>("fileCode");

                    b.Property<string>("firstYearOfPlay");

                    b.Property<int?>("leagueid");

                    b.Property<string>("link");

                    b.Property<string>("locationName");

                    b.Property<string>("name");

                    b.Property<string>("shortName");

                    b.Property<int?>("sportid");

                    b.Property<int?>("springLeagueid");

                    b.Property<string>("teamCode");

                    b.Property<string>("teamName");

                    b.Property<int?>("venueid");

                    b.HasKey("id");

                    b.HasIndex("divisionid");

                    b.HasIndex("leagueid");

                    b.HasIndex("sportid");

                    b.HasIndex("springLeagueid");

                    b.HasIndex("venueid");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Venue", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("link");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Roster", b =>
                {
                    b.HasOne("dugout.WebApi.Models.MlbRosters")
                        .WithMany("roster")
                        .HasForeignKey("MlbRostersid");

                    b.HasOne("dugout.WebApi.Models.Person", "person")
                        .WithMany()
                        .HasForeignKey("personid");

                    b.HasOne("dugout.WebApi.Models.Position", "position")
                        .WithMany()
                        .HasForeignKey("positioncode");

                    b.HasOne("dugout.WebApi.Models.Status", "status")
                        .WithMany()
                        .HasForeignKey("statuscode");
                });

            modelBuilder.Entity("dugout.WebApi.Models.Team", b =>
                {
                    b.HasOne("dugout.WebApi.Models.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionid");

                    b.HasOne("dugout.WebApi.Models.League", "league")
                        .WithMany()
                        .HasForeignKey("leagueid");

                    b.HasOne("dugout.WebApi.Models.Sport", "sport")
                        .WithMany()
                        .HasForeignKey("sportid");

                    b.HasOne("dugout.WebApi.Models.SpringLeague", "springLeague")
                        .WithMany()
                        .HasForeignKey("springLeagueid");

                    b.HasOne("dugout.WebApi.Models.Venue", "venue")
                        .WithMany()
                        .HasForeignKey("venueid");
                });
#pragma warning restore 612, 618
        }
    }
}
